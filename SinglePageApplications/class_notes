
    - Loading one template to another template without refreshing the web page
      called as Single Page Application.

    - Loading one template to another template in Single Page Application called
      as Routing.

    - we can implement the Routing in Single Page Application by using following
      modules.

        1. ngRoute

        2. ui.router


Steps to implement the Single Page Application by using "ngRoute" Module:
-------------------------------------------------------------------------

Step 1:
    download ngRoute Module by using bower.

bower.json
----------
{
    "name":"sreenutech",
    "dependencies":{
        "angular":"~1.5.0",
        "angular-route":"~1.5.0"
    }
}
> bower install
[Note : "angular-route" is the bower key used to download the "ngRoute" module
        dependency file]
[Note : "angular-route.min.js" file representing "ngRoute" module dependency file]


Step 2:
------
    Add the ngRoute module dependency

app.js
------
var app = angular.module("app",["ngRoute"]);


Step 3:
------
    create target templates

---------------
Basic_ngRoute
        templates
            page_one.html
            page_two.html
---------------

page_one.html
-------------
<h1>{{var_one}}</h1>

page_two.html
--------------
<h1>{{var_two}}</h1>

Step 4:
-------
    Create the Controllers.
-----------------
controllers
    page_one.js
    page_two.js
-----------------
page_one.js
-----------
app.controller("page_one",function($scope){
    $scope.var_one = "I am from page one controller !";
});
page_two.js
-----------
app.controller("page_two",function($scope){
    $scope.var_two = "I am from page two controller !";
});


Step 5:
-------
    complete the mapping in single page application

Rule 1:
    Mapping should done in config phase

    Ex.
        app.config(function(){
            //Mapping Code
        });

Rule 2:
    Mapping Should Done with the help of "$routeProvider" object

Rule 3:
-------
    Mapping Should be in the form of  a "key & value" pairs

Ex.                 page_one.html

    1. "/page_one"

                    page_one



                    page_two.html

    2. "/page_two"

                    page_two


config.js
---------
app.config(function($routeProvider){
    $routeProvider.when("/page_one" , {templateUrl:"templates/page_one.html" ,
                                        controller:"page_one"})
                  .when("/page_two" , {templateUrl:"templates/page_two.html" ,
                                        controller:"page_two"})
                  .otherwise("/page_one" , {templateUrl:"templates/page_one.html" ,
                                controller:"page_one"});
});



Step 6:
-------
    create the source template

index.html
----------
<a href="page_one"><b>Page_One</b></a>
<a href="page_two"><b>Page_Two</b></a>
<div ng-view></div>


Single Page Applications by using ui.router module:
---------------------------------------------------

1. Download "ui.router" module

[Note : "angular-ui-router" is the bower key used to download the ui.router
        dependency]


2. Add the "ui.router" dependency.

app.js
------
var app = angular.module("app",["ui.router"]);


3. create the templates

-------------
templates
    page_one.html
    page_two.html
--------------

4. create the controllers

----------------
controllers
    page_one.js
    page_two.js
-----------------

5. implement the mapping

config.js
---------
app.config(function($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one" , {
            url:"/page_one",
            templateUrl:"templates/page_one.html",
            controller:"page_one"
    })
    .state("page_two" , {
                url:"/page_two",
                templateUrl:"templates/page_two.html",
                controller:"page_two"
    });
    $urlRouterProvider.otherwise("/page_one");
});

Step 6:
-------
    create the source template.

index.html
----------
<a ui-sref="page_one">Page_One</a>
<a ui-sref="page_two">Page_Two</a>
<div ui-view></div>

NodeJS
------
    - NodeJS is the Server Side Scripting language.

    - We can develop Node Applications by using JavaScript.

    - By using NodeJS, we can develop both http & tcp servers.

Modules in NodeJS:
-----------------

1. express
    - we can develop Rest API.

2. mysql
    - we can interact with the mysql database.

3. mongodb
    - we can interact with mongodb.

4. body-parser
    - set the MIME Type.

5. http
    - develop the http servers.

6. fs
    - used to interact with the flat files.

[Note : we can download all the modules by using "package.json" file]
[ Note : we can run "package.json"  file by using "npm install" command]









































