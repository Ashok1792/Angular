JavaScript:
-----------
    - JavaScript is the scripting language.

    - JavaScript used to make the HTML Pages as Dynamic Interactive web pages.

    - we can display the data on browser console by using "console.log()"

    - we can display the data on web page by using "document.write()"

variables:
----------
    - variables are used to store the data.

    - variables are used to store all categories of data.

        Ex.
            string
            boolean
            integer
            json
            objects
                --
                --
                --

    - we can define the variables by using "var" keyword.

Ex_1:
<script>
    var sub_one = "AngularJS";
    var sub_two = "NodeJS";
    var sub_three = "MongoDB";
    //display the data on browser console
    console.log(sub_one+"<==>"+sub_two+"<==>"+sub_three);
    //display the data on webpage
    document.write(sub_one+"<==>"+sub_two+"<==>"+sub_three);
</script>

Ex_2:
    <h1 id="first_h1"></h1>
    <h1 id="second_h1"></h1>
    <h1 id="third_h1"></h1>
    <script>
        document.getElementById("first_h1").innerHTML = "Angular5";
        document.getElementById("second_h1").innerHTML = "NodeJS";
        document.getElementById("third_h1").innerHTML = "MySQL";
    </script>

Ex_3:
    <script>
        //global variable
        //var data = 100;
        let data = 100;
        if(true){
            //local variable
            //var data = 200;
            let data = 200;
        }

        //access the global variable
        document.write(data);
    </script>
[Note : "local scope changes" effecting the "global scope members" called as global
        polluting issue]

[Note : "let" is the keyword introduced in ECMA5 standards used to overcome the
        global polluting issue in javascript]


functions in javascript:
-----------------------
    - set of particular "business logic" called as function.

    - functions are used to reuse the business logic.

    - we have two types of functions

            1. Named JavaScript Functions
            2. Anonymous JavaScript Functions


Named JavaScript Functions
--------------------------
    - The Function with the name called as Named JavaScript Function.

    - we can define the functions with the help of "function" keyword.


Syntax.
    //defination
    function function_name(){
        //Business Logic
    }

    //call the function
    function_name();

Ex_1:
    function fun_one(){
        return "Welcome...!";
    }
    console.log( fun_one );   //function defination
    console.log( fun_one() );  //Welcome...!

Ex_2:
    function fun_one(){
        return fun_two;
    }
    function fun_two(){
        return "Welcome...!";
    }
    var def = fun_one();
    console.log( def() );   //Welcome...!


Ex_3:
    <script>
        function fun_one(arg1,arg2,arg3){
            document.write( arg1()+"<==>"+arg2()+"<==>"+arg3() );
        }
        function fun_two(){
            return "AngularJS";
        }
        function fun_three(){
            return "NodeJS";
        }
        function fun_four(){
            return "MongoDB";
        }
        fun_one(fun_two,fun_three,fun_four);
    </script>


Anonymous Function:
-------------------
    - The Function with out name called as anonymous function.
    - anonymous functions are more secured compared to named functions.
    - anonymous functions utilizes the heap memory efficiently.

Syntax.
    //function defination
    var fun_one = function(){
        //Business Logic
    }

    //function calling
    fun_one()

Ex_1:
    <script>
        var fun_one = function(){
            return "Welcome...!";
        }
        console.log( fun_one() );   //Welcome...!
    </script>


Ex_2:
    <script>
        var fun_one = function(){
            return function(){
                 return "Welcome...!";
            }
        }
        console.log( fun_one()() ); //Welcome...!
    </script>


Ex_3:
    pass the anonymous functions definations as arguments to another anonymous function.

var fun_one = function(arg1,arg2,arg3){
    document.write ( arg1()+"<==>"+arg2()+"<==>"+arg3() );
}

fun_one(function(){ return "AngularJS" } ,
        function(){ return "NodeJS" } ,
        function(){ return "MongoDB" });


Ex_4:
    iterate the array by using for loop.
<script>
    let array = [10,20,30,40,50];
    for(let i=0;i<array.length;i++){
        document.write(array[i]);
    }
</script>


Ex_5:
    push the data to array (0 - 9).

<script>
    var array = [];
    for(var i=0 ;i<10;i++){
        //array.push(i);
        array.unshift(i);
    }
    console.log(array.length);   //10
    for(var i=0;i<array.length;i++){
        console.log(array[i]);
    }
</script>


Ex_6:
    push the anonymous functions to array.

<script>
    var array = [];
    for(var i=0;i<5;i++){
        array.push ( function(){ return i; } );
    }
    for(var i=0;i<array.length;i++){
        document.write ( array[i]() );
    }
</script>


json:
-----
    - json stands for java script object notation.

    - we can carry the data over the network by using following formats.

            1. XML
            2. JSON

    - JSON is light weight compared to XML.

    - JSON is network friendly format.

    - parsing of json files are simple compared to XML Parsing

Syntax.
    Objects - { }
    Arrays  - [ ]
    data    - key & value

Ex_1:
    <script>
        var data = {
            "sub_one":"AngularJS",
            "sub_two":"NodeJS",
            "sub_three":"MongoDB"
        };
        console.log(data.sub_one+"..."+data.sub_two+"..."+data.sub_three);
    </script>


Ex_2:
    <script>
        var data = {
            "login":login,
            "logout":logout
        };
        function login(){
            return "Welcome to login module !";
        }
        function logout(){
            return "Welcome to logout module !";
        }
        console.log(data.login() ); //Welcome to login module !
        console.log(data.logout() ); //Welcome to logout module !
    </script>






















